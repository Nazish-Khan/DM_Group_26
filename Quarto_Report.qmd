# PART 2: Data Generation and Management
## Synthetic Data Generation

Generate an information for each table by using a generative A.I.

We use a generative A.I. such as a data generating website like 'Mockaroo' and 'ChatGPT to generate a synthethic code for python software package 'facker'' to generate a data set for each entity to make sure that the synthetic data is realistic and logical. However, we do not include any foreign keys in these data set and we do not create any data for relationship tables from these platform. However, we add another attribute in SUPPLIERS table only for the purpose of generating logical data for Relationship tables creating e.g. to ensure that this product is actually purchased from a supplier which sells this product category. We drop this attribute after completing generate these tables since it is not showed in our logical design.

Create a foreign key in each entity table

After receiving a data set for each table, we use a package 'tidyverse' in an R software to randomly create a foreign key to any table, which contains this key in its table according to our logical database design.

Create a self-referencing relationship within a CUSTOMERS Table
```{r}
# Read the CSV file into a data frame
customer_data <- read.csv("data_upload/Customer/Customer_data.csv")

# Function to generate random values from the 'customer_id' column
generate_random_related_id <- function(customer_data, column_name) {
  random_values <- sample(customer_data[[column_name]], replace = TRUE)
  # Replace some random values with 'N/A' around 70% of all information
  na_indices <- sample(1:nrow(customer_data), size = round(nrow(customer_data) * 0.7), replace = FALSE)
  random_values[na_indices] <- 'N/A'
  return(random_values)
}

# Generate random values for 'related_id' and add it as a new column
customer_data$related_id <- generate_random_related_id(customer_data, "customer_id")

# Specify the output file name with absolute path
output_file_name <- "Customer_data_with_related_id.csv"

# Save the modified data frame to a new CSV file
write.csv(customer_data, file = output_file_name, row.names = FALSE)

cat("DataFrame with 'related_id' column saved to:", output_file_name, "\n")
```

Insert foreign keys from SUPPLIERS table and PRODUCTS table in ADVERTISEMENTS table
```{r}
# Read the CSV files
advertisements_data <- read.csv("data_upload/Advertisement/Advertisements_data.csv")
supplier_data <- read.csv("Supplier_data (200).csv")
product_data <- read.csv("Product_data.csv")

# Ensure columns supplier_id and product_id have the same name
colnames(supplier_data)[1] <- "supplier_id"
colnames(product_data)[1] <- "product_id"

# Match supplier_id with product_id based on category_id
matched_data <- merge(supplier_data, product_data, by = "category_id")

# Specify the replacement probability (adjust as needed)
replacement_probability <- 0.2

# Calculate the number of replacements based on the replacement probability
num_replacements <- round(nrow(advertisements_data) * replacement_probability)

# Randomly select supplier_id and product_id from the matched data
random_indices <- sample(nrow(matched_data), nrow(advertisements_data), replace = num_replacements > 0)

# Add supplier_id and product_id columns to Advertisements_data
advertisements_data$supplier_id <- matched_data$supplier_id[random_indices]
advertisements_data$product_id <- matched_data$product_id[random_indices]

# Save the modified DataFrame to a new CSV file
output_file_name <- "Advertisements_data_with_ids.csv"
write.csv(advertisements_data, file = output_file_name, row.names = FALSE)

cat("DataFrame with 'supplier_id' and 'product_id' columns saved to:", output_file_name, "\n")
```

Create relationship tables

We decide to use a package "tidyverse" in an R software to generate these relationship tables. We use primary keys from related tables to form a composite key for each relationship table and ensure that this composite key is unique. Then, we use a command "random()" to generate the data in each relationship table. 

Create relationship table of Supply 
```{r}
# Ensure columns supplier_id and product_id have the same name
colnames(supplier_data)[1] <- "supplier_id"
colnames(product_data)[1] <- "product_id"

# Match supplier_id with Product_id based on category_id
matched_data <- merge(supplier_data, product_data, by = "category_id")

# Randomly select 1500 unique combinations of supplier_id and product_id
unique_combinations <- unique(matched_data[, c("supplier_id", "product_id")])
if (nrow(unique_combinations) < 1500) {
  stop("Insufficient unique combinations of supplier_id and product_id.")
}
random_indices <- sample(nrow(unique_combinations), 1500, replace = FALSE)
selected_combinations <- unique_combinations[random_indices, ]

# Generate random product_cost values lower than product_price by 5% - 30%
set.seed(123)  # Set seed for reproducibility
product_cost <- matched_data$product_price[random_indices] * runif(1500, 0.70, 0.95)

# Generate random supply_quantity values
supply_quantity <- sample(10:100, 1500, replace = TRUE)

# Combine supplier_id, product_id, product_cost, and supply_quantity into a data frame
supply_data <- data.frame(
  product_id = selected_combinations$product_id,
  supplier_id = selected_combinations$supplier_id,
  product_cost = product_cost,
  supply_quantity = supply_quantity
)

# Save the generated data to a new CSV file
output_file_name <- "SUPPLY_data.csv"
write.csv(SUPPLY_data, file = output_file_name, row.names = FALSE)

cat("Dataset with 1500 records saved to:", output_file_name, "\n")
```

Create relationship table of Storage (Where Product_data must exist in supply table)
```{r}
# Read the CSV files
Warehouse_data <- read.csv("Warehouse_data.csv")

# Ensure columns Warehouse_id and Product_id have the same name
colnames(Warehouse_data)[1] <- "Warehouse_id"
colnames(Product_data)[1] <- "Product_id"

# Randomly select 1500 unique combinations of Product_id from SUPPLY df and Warehouse_id
unique_combinations <- expand.grid(Product_id = unique(SUPPLY_data$Product_id),
                                   Warehouse_id = unique(Warehouse_data$Warehouse_id))
random_indices <- sample(nrow(unique_combinations), 1500, replace = FALSE)
selected_combinations <- unique_combinations[random_indices, ]

# Generate random Store_date values (assuming date range from 2020-01-01 to 2022-12-31)
set.seed(123)  # Set seed for reproducibility
Store_date <- sample(seq(as.Date("2020-01-01"), as.Date("2022-12-31"), by = "day"), 1500, replace = TRUE)

# Generate random Store_quantity values
Store_quantity <- sample(1:100, 1500, replace = TRUE)

# Combine Product_id, Warehouse_id, Store_date, and Store_quantity into a data frame
Store_data <- data.frame(
  Product_id = selected_combinations$Product_id,
  Warehouse_id = selected_combinations$Warehouse_id,
  Store_date = Store_date,
  Store_quantity = Store_quantity
)

# Save the generated data to a new CSV file
output_file_name <- "Store_data.csv"
write.csv(Store_data, file = output_file_name, row.names = FALSE)

cat("Dataset with 1500 records saved to:", output_file_name, "\n")
```

Create an order relationship table (Where Supplier_id and Product_id should exist in SUPPLY)
```{r}
# Read the CSV files
Customer_data <- read.csv("Customer_data.csv")
Supplier_data <- read.csv("Supplier_data (200).csv")
Order_details_data <- read.csv("Order_details.csv")
Product_data <- read.csv("Product_data.csv")
SUPPLY_data <- read.csv("SUPPLY_data.csv")

# Ensure columns have consistent names
colnames(Supplier_data)[1] <- "Supplier_id"
colnames(Order_details_data)[1] <- "Order_details_id"
colnames(Product_data)[1] <- "Product_id"

# Match Supplier_id with Product_id based on Category_id
matched_data <- merge(Supplier_data, Product_data, by = "Category_id")

# Get unique combinations of Supplier_id and Product_id from matched_data
unique_combinations_matched <- unique(matched_data[, c("Supplier_id", "Product_id")])

# Initialize variables
n <- 1000  # Number of records
Order_data <- data.frame(
  Product_id = character(n),
  Customer_id = character(n),
  Supplier_id = character(n),
  Order_details_id = character(n),
  Order_transaction_date = as.Date(character(n)),  # Initialize as character and convert to Date
  Order_quantity = integer(n)
)

# Generate unique combinations and assign values to Order_data
set.seed(123)  # Set seed for reproducibility
i <- 1
while (i <= n) {
  # Randomly select a unique combination from matched_data
  idx <- sample(nrow(unique_combinations_matched), 1)
  Supplier_id <- unique_combinations_matched$Supplier_id[idx]
  Product_id <- unique_combinations_matched$Product_id[idx]
  
  # Check if the combination exists in SUPPLY_data
  if (any(SUPPLY_data$Supplier_id == Supplier_id & SUPPLY_data$Product_id == Product_id)) {
    # Assign Supplier_id and Product_id
    Order_data[i, "Supplier_id"] <- Supplier_id
    Order_data[i, "Product_id"] <- Product_id
    
    # Randomly select indices for other attributes
    idx_Customer <- sample(nrow(Customer_data), 1)
    idx_Order_details <- sample(nrow(Order_details_data), 1)
    
    # Assign values to other columns
    Order_data[i, "Customer_id"] <- Customer_data$Customer_id[idx_Customer]
    Order_data[i, "Order_details_id"] <- Order_details_data$Order_details_id[idx_Order_details]
    
    # Generate random transaction date
    transaction_date <- sample(seq(as.Date("2020-01-01"), as.Date("2022-12-31"), by = "day"), 1)
    Order_data[i, "Order_transaction_date"] <- transaction_date
    
    # Generate random Order_quantity value
    Order_data[i, "Order_quantity"] <- sample(1:100, 1)
    
    i <- i + 1
  }
}

# Save the generated data to a new CSV file
output_file_name <- "Order_data.csv"
write.csv(Order_data, file = output_file_name, row.names = FALSE)

cat("Dataset with 1000 records saved to:", output_file_name, "\n")
```

